Index: src/main/ui/gui/UI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui.gui;\n\n\nimport model.*;\nimport persistence.JsonReader;\nimport persistence.JsonWriter;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n// provide a graphic user interface\nclass UI extends JFrame {\n    private static final int WIDTH = 800;\n    private static final int HEIGHT = 600;\n    private static final String JSON_STORE = \"./data/workroom.json\";\n    private JDesktopPane desktop;\n    private JInternalFrame controlPanel;\n    private TimetableGetter getter = new TimetableGetter();\n    private WorkRoom workRoom;\n    private JsonWriter jsonWriter;\n    private JsonReader jsonReader;\n\n    //Modify: this.\n    //Effect: create a new control panel\n    public UI() {\n        workRoom = new WorkRoom(\"Alex's workroom\");\n        jsonWriter = new JsonWriter(JSON_STORE);\n        jsonReader = new JsonReader(JSON_STORE);\n        desktop = new JDesktopPane();\n        desktop.addMouseListener(new DesktopFocusAction());\n        controlPanel = new JInternalFrame(\"Control Panel\", false,\n                false, false, false);\n        controlPanel.setLayout(new BorderLayout());\n\n        setContentPane(desktop);\n        setTitle(\"CPSC 210: Timetable Generator\");\n        setSize(WIDTH, HEIGHT);\n\n        addButtonPanel();\n\n        controlPanel.pack();\n        controlPanel.setVisible(true);\n        desktop.add(controlPanel);\n\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        centreOnScreen();\n        setVisible(true);\n    }\n\n    //Modify: this.\n    //Effect: add button to the control panel\n    private void addButtonPanel() {\n        JPanel buttonPanel = new JPanel();\n        buttonPanel.setLayout(new GridLayout(4, 3));\n        buttonPanel.add(new JButton(new AddCourseAction()));\n        buttonPanel.add(new JButton(new ClearCoursesAction()));\n        buttonPanel.add(new JButton(new GetTimetableAction()));\n\n        buttonPanel.add(new JButton(new PrintCoursesAction()));\n        buttonPanel.add(new JButton(new GetCreditSumAction()));\n        buttonPanel.add(new JButton(new GetNumberOfCourseAction()));\n\n        buttonPanel.add(new JButton(new GetAllAddedCourseDetails()));\n        buttonPanel.add(new JButton(new SaveToFileAction()));\n\n        buttonPanel.add(new JButton(new SaveFileAction()));\n        buttonPanel.add(new JButton(new LoadAction()));\n        buttonPanel.add(new JButton(new PrintSavedTimetableAction()));\n\n        controlPanel.add(buttonPanel, BorderLayout.WEST);\n    }\n\n    //Effect: set the height and width of the control panel\n    private void centreOnScreen() {\n        int width = Toolkit.getDefaultToolkit().getScreenSize().width;\n        int height = Toolkit.getDefaultToolkit().getScreenSize().height;\n        setLocation((width - getWidth()) / 2, (height - getHeight()) / 2);\n    }\n\n    //Store the implementation of the add course button\n    private class AddCourseAction extends AbstractAction {\n\n        AddCourseAction() {\n            super(\"Add Course\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            getter.addCourse(getInformation());\n        }\n\n        //Effect: return a Course with all parameter needed.\n        private Course getInformation() {\n            return new Course(getCourseName(), getCourseCredit(), getMonStart(), getMonEnd(),\n                    getTueStart(), getTueEnd(), getWedStart(), getWedEnd(), getThuStart(),\n                    getThuEnd(), getFriStart(), getFriEnd());\n        }\n\n        //Effect: Return the name of the course.\n        private String getCourseName() {\n\n            return JOptionPane.showInputDialog(null,\n                    \"Course name:\",\n                    \"Enter Course name\",\n                    JOptionPane.QUESTION_MESSAGE);\n        }\n\n        //Effect: Return the number of credit of the course.\n        private int getCourseCredit() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Course credit:\",\n                    \"Enter number of credit of the course:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the starting time on monday of the course.\n        private int getMonStart() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Monday Start time:\",\n                    \"Enter Monday Start time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the ending time on monday of the course.\n        private int getMonEnd() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Monday end time:\",\n                    \"Enter Monday end time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the starting time on tuesday of the course.\n        private int getTueStart() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Tuesday Start time:\",\n                    \"Enter Tuesday Start time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the ending time on monday of the course.\n        private int getTueEnd() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Tuesday end time:\",\n                    \"Enter Tuesday end time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the starting time on wedensday of the course.\n        private int getWedStart() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Wednesday Start time:\",\n                    \"Enter Wednesday Start time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the ending time on wedensday of the course.\n        private int getWedEnd() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Wednesday end time:\",\n                    \"Enter Wednesday end time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the starting time on thursday of the course.\n        private int getThuStart() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Thursday Start time:\",\n                    \"Enter Thursday Start time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the ending time on thurday of the course.\n        private int getThuEnd() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Thursday end time:\",\n                    \"Enter Thursday end time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the starting time on friday of the course.\n        private int getFriStart() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Friday start time:\",\n                    \"Enter Friday start time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n        //Effect: Return the ending time on friday of the course.\n        private int getFriEnd() {\n            String s = JOptionPane.showInputDialog(null,\n                    \"Friday end time:\",\n                    \"Enter Friday end time:\",\n                    JOptionPane.QUESTION_MESSAGE);\n            return Integer.parseInt(s);\n        }\n\n    }\n\n    private class PrintCoursesAction extends AbstractAction {\n\n        PrintCoursesAction() {\n            super(\"Print Course\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n\n            sp.printName(getter.showAllCourse());\n        }\n    }\n\n    private class ClearCoursesAction extends AbstractAction {\n\n        ClearCoursesAction() {\n            super(\"Clear All Added Courses\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            getter = new TimetableGetter();\n        }\n    }\n\n    private class GetCreditSumAction extends AbstractAction {\n\n        GetCreditSumAction() {\n            super(\"Get Credit Sum\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n            sp.printCreditSum(getter.sumOfCredit());\n        }\n    }\n\n    private class GetNumberOfCourseAction extends AbstractAction {\n\n        GetNumberOfCourseAction() {\n            super(\"Get Number Of Courses Added\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n            sp.printCreditSum(getter.numberOfCourse());\n        }\n    }\n\n    private class SaveToFileAction extends AbstractAction {\n\n        SaveToFileAction() {\n            super(\"Save To File\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            Timetable timetable = new Timetable(getter.getResult());\n            int credit = getter.sumOfCredit();\n            ArrayList<String> temp = getter.showAllCourse();\n            ArrayList<String> names = new ArrayList<>();\n            for (String s : temp) {\n                if (!names.contains(s)) {\n                    names.add(s);\n                }\n            }\n            String name = JOptionPane.showInputDialog(null,\n                    \"Please enter name of this timetable: \",\n                    \"Please enter name of this timetable: \",\n                    JOptionPane.QUESTION_MESSAGE);\n            workRoom.addTimetable(new Candidates(name, timetable, credit, names));\n        }\n    }\n\n    private class SaveFileAction extends AbstractAction {\n\n        SaveFileAction() {\n            super(\"Save File\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            try {\n                jsonWriter.open();\n                jsonWriter.write(workRoom);\n                jsonWriter.close();\n                System.out.println(\"Saved \" + workRoom.getName() + \" to \" + JSON_STORE);\n            } catch (FileNotFoundException e) {\n                System.out.println(\"Unable to write to file: \" + JSON_STORE);\n            }\n        }\n    }\n\n    private class PrintSavedTimetableAction extends AbstractAction {\n\n        PrintSavedTimetableAction() {\n            super(\"Print Saved Timetable\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n\n            sp.printSaved(workRoom.getCandidates());\n        }\n    }\n\n    private class LoadAction extends AbstractAction {\n\n        LoadAction() {\n            super(\"Load\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            try {\n                workRoom = jsonReader.read();\n                System.out.println(\"Loaded \" + workRoom.getName() + \" from \" + JSON_STORE);\n            } catch (IOException e) {\n                System.out.println(\"Unable to read from file: \" + JSON_STORE);\n            }\n        }\n    }\n\n    private class GetTimetableAction extends AbstractAction {\n\n        GetTimetableAction() {\n            super(\"Get Timetable\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n            sp.printTimetable(getter.getResult());\n        }\n    }\n\n    private class GetAllAddedCourseDetails extends AbstractAction {\n\n        GetAllAddedCourseDetails() {\n            super(\"Get Details of Courses Added\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent evt) {\n            ScreenPrinter sp;\n            sp = new ScreenPrinter(UI.this);\n            desktop.add((ScreenPrinter) sp);\n            sp.printCourses(getter.getAllCourse());\n        }\n    }\n\n\n    private class DesktopFocusAction extends MouseAdapter {\n        @Override\n        public void mouseClicked(MouseEvent e) {\n            UI.this.requestFocusInWindow();\n        }\n    }\n\n    // starts the application\n    public static void main(String[] args) {\n        new UI();\n    }\n}\n
===================================================================
diff --git a/src/main/ui/gui/UI.java b/src/main/ui/gui/UI.java
--- a/src/main/ui/gui/UI.java	
+++ b/src/main/ui/gui/UI.java	
@@ -86,10 +86,13 @@
     //Store the implementation of the add course button
     private class AddCourseAction extends AbstractAction {
 
+        //Effect: Construct a button named add course
         AddCourseAction() {
             super("Add Course");
         }
 
+        //Modify: this
+        //Effect: Add course to the getter
         @Override
         public void actionPerformed(ActionEvent evt) {
             getter.addCourse(getInformation());
